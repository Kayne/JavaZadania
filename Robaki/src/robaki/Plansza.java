/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package robaki;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author kayne
 */
public class Plansza extends javax.swing.JPanel
        implements ActionListener {

    private javax.swing.Timer BoardTimer = new javax.swing.Timer(20, null);
    Logika logika;
    //private List<Thread> lista;
    int co_więcej = 0;
    int N = 0;
    int M = 0;
    int kolumna = 0;
    int wiersz = 0;

    /**
     * Creates new form Plansza
     */
    public Plansza() {
        initComponents();

        BoardTimer.addActionListener(this);
        BoardTimer.start();

        //lista = new ArrayList<>();
    }

    public void setN(int n) {
        N = n;
    }

    public void setM(int m) {
        M = m;
    }

    public void setLogika(Logika log) {
        logika = log;
    }

    //public void setLista(List<Thread> list) {
    //lista = list;
    //}
    @Override
    public void paint(Graphics g1) {
        Graphics2D g = (Graphics2D) g1;
        super.paint(g);
        Font font = new Font("Helvetica", Font.PLAIN, (int)(getWysokośćKwadratu()*0.80));

        g.setFont(font);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        if (N > M) {
            co_więcej = N;
        } else {
            co_więcej = M;
        }
        for (int i = 0; i <= co_więcej; i++) {
            g.drawLine(i * getSzerokośćKwadratu(), 0, i * getSzerokośćKwadratu(), co_więcej * getWysokośćKwadratu());
            g.drawLine(0, i * getWysokośćKwadratu(), co_więcej * getSzerokośćKwadratu(), i * getWysokośćKwadratu());
        }

        synchronized (logika) {
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    if (logika.isZajęte(i, j) != 0) {
                        kolumna = i * getSzerokośćKwadratu();
                        wiersz = j * getWysokośćKwadratu();
                        g.setColor(logika.getRobaczek(logika.isZajęte(i, j)).getKolor());
                        g.fillRect(kolumna+2, wiersz+2, getSzerokośćKwadratu()-3, getWysokośćKwadratu()-3);
                        //g.drawString(Integer.toString(logika.isZajęte(i, j)), kolumna, wiersz + (int)(getWysokośćKwadratu()*0.80));
                        //g.drawString(Integer.toString(logika.isZajęte(i, j)), kolumna + 1, wiersz + (int)(getWysokośćKwadratu()*0.80) + 1);
                        //g.drawString(Integer.toString(logika.isZajęte(i, j)), kolumna + 2, wiersz + (int)(getWysokośćKwadratu()*0.80) + 2);
                    }
                }
            }
        }

    }

    /**
     * Zwraca szerokość kwadratu, bazując na szerokości całej planszy.
     *
     * @return integer szerokość pojedynczego kwadratu
     */
    private int getSzerokośćKwadratu() {
        return getWidth() / N;
    }

    /**
     * Zwraca wysokość kwadratu, bazując na wysokości całej planszy.
     *
     * @return integer wysokość pojedynczego kwadratu
     */
    private int getWysokośćKwadratu() {
        return getHeight() / M;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (evt.getClickCount() == 2) {
            int col, row;
            col = evt.getX() * logika.getKolumn() / getWidth();
            row = evt.getY() * logika.getWierszy() / getHeight();
            synchronized (logika) {
                if (logika.isZajęte(col, row) == 0) {
                    Robak robaczek = new Robak(logika, col, row);
                    logika.addRobak(robaczek);
                    logika.addThread(new Thread(robaczek));
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        this.repaint();
    }
}
